snippet cl
console.log($1)
endsnippet

snippet req "require"
const $1 = require('$2')
endsnippet

snippet im "import"
import $1 from '$2'
endsnippet

snippet err "throw new Error(err)"
if (err) throw new Error(err)
endsnippet

snippet desc "describe"
describe('$1', () => {
  $0
})
endsnippet

snippet bef "beforeEach"
beforeEach(() => {
	$0
})
endsnippet

snippet it "it"
it('should $1', () => {
	$0
})
endsnippet

snippet enz "enzyme skeleton"
import React from 'react';
import enzyme, { shallow } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';
import $1 from '.'


enzyme.configure({ adapter: new Adapter() });

describe('<$1 />', () => {
  let props
  let wrapper

  beforeEach(() => {
    props = {

    }
    wrapper = shallow(<$1 {...props} />)
  })

  it('should render correctly', () => {
    expect(wrapper).toMatchSnapshot()
  })
})

endsnippet

snippet ex "expect"
expect($1).toBe($0)
endsnippet

snippet do "do"
.do(x => console.log('$0', x))
endsnippet

snippet cdm "componentDidMount"
componentDidMount() {
	$1
}
endsnippet

snippet cwm "componentWillMount"
componentWillMount() {
	$1
}
endsnippet

snippet cwu "componentWillUpdate"
componentWillUpdate(nextProps, nextState) {
	$1
}
endsnippet

snippet cdu "componentDidUpdate"
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwun "componentWillUnmount"
componentWillUnmount() {

}
endsnippet

snippet imre "import React"
import React from 'react'
$0
endsnippet

snippet imlo "import Lodash"
import _ from 'lodash'
$0
endsnippet

snippet impr "import { promisify }"
import { promisify } from 'util'
$0
endsnippet

snippet rec "React es6 class"
// @flow
import React, { Component } from 'react'

type Props = $ReadOnly<{}>

class $1 extends Component<Props> {
  static displayName = '$1'

  render() {
    return (
      <div>$1</div>
    )
  }
}

export default $1
endsnippet

snippet refu "React functional component"
// @flow
import React from 'react'


const $1 = props => {
  return (
    <div>$1</div>
  )
}

export default $1
endsnippet

snippet pt "proptypes"
propTypes.$0
endsnippet

snippet div "<div>"
<div>
  $0
</div>
endsnippet

snippet theme "${props => props.theme}"
${props => props.theme.$0}
endsnippet
