snippet cl
console.log($1)
endsnippet

snippet fun "function" i
function $1 ($2) {
  $0
}
endsnippet

snippet arr "arrow function"
($1) => {
  $0
}
endsnippet

snippet re "require"
const $1 = require('$2')
endsnippet

snippet im "import"
import $1 from '$2'
endsnippet

snippet us "use strict"
'use strict'
endsnippet

snippet err "throw err"
if (err) throw err
endsnippet

snippet iife "iife"
(function () {
	'use strict';

	$0
}());
endsnippet

snippet desc "describe"
describe('$1', function () {
  $0
});
endsnippet

snippet it "it"
it('should $1', function () {
	$0
});
endsnippet

snippet tap "tap"
.tap(x => console.log('$0', x))
endsnippet

snippet do "do"
.do(x => console.log('$0', x))
endsnippet

snippet inj "@inject"
/**
 * @inject $0
 */
endsnippet

snippet dprop "default prop"
$1={this.props.$1}
endsnippet

snippet cdm "componentDidMount"
componentDidMount() {
	$1
},
endsnippet

snippet cwm "componentWillMount"
componentWillMount() {
	$1
},
endsnippet

snippet cwu "componentWillUpdate"
componentWillUpdate(nextProps, nextState) {
	$1
},
endsnippet

snippet cdu "componentDidUpdate"
componentDidUpdate(prevProps, prevState) {
	$1
},
endsnippet

snippet cwun "componentWillUnmount"
componentWillUnmount() {

},
endsnippet

snippet imre "import React"
import React from 'react'
$0
endsnippet

snippet imlo "import Lodash"
import _ from 'lodash'
$0
endsnippet

snippet recc "React createClass"
import _ from 'lodash'
import React from 'react'

const $1 = React.createClass({

	displayName: '$1',

	componentWillMount() {

	},

	render() {
		return (

		)
	}
})

export default $1
endsnippet

snippet rec "React es6 class"
import _ from 'lodash'
import React, { Component } from 'react'

class $1 extends Component {
	constructor(props) {
		super(props)
		this.state = {

		}
	}

	componentWillMount() {

	}

	render() {
		return (

		)
	}
}

export default $1
endsnippet

snippet refu "React functional component"
import _ from 'lodash'
import React from 'react'

const $1 = props => {
	return (

	)
}

export default $1
endsnippet

snippet copy "Copy.get()"
Copy.get('$1')
endsnippet

snippet state "state$"
const state$ = Rx.Observable
	.merge(
		$0
	)
	.scan((acc, update) => _.assign({}, acc, update), {})
	.shareValue({})
endsnippet

snippet maps "map state"
$1$.map($1 => ({$1}))
endsnippet

snippet mix "mixins"
mixins: [RxDisposable, RxEvents, RxLifecycle, RxProps, RxStateObserver],
endsnippet

snippet immix "import mixins"
import { RxDisposable, RxEvents, RxLifecycle, RxProps, RxStateObserver } from 'rx-mixin'
endsnippet

snippet propt "proptypes"
React.PropTypes.$0
endsnippet
